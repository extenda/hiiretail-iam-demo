/* tslint:disable */
/* eslint-disable */
/**
 * User Profiles API
 * User Profiles API docs <br><br> <a href=\"/swagger/spec.json\">OpenAPI Document (json)</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AddressDto
 */
export interface AddressDto {
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    street1: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    street2: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    city: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    postalCode: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    country: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    region: string;
}
/**
 * 
 * @export
 * @interface AttributesDefinitionDto
 */
export interface AttributesDefinitionDto {
    /**
     * 
     * @type {string}
     * @memberof AttributesDefinitionDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof AttributesDefinitionDto
     */
    classifier: Classifier;
}

/**
    * @export
    * @enum {string}
    */
export enum Classifier {
    NonSensitive = 'NON_SENSITIVE',
    Low = 'LOW',
    Medium = 'MEDIUM',
    Sensitive = 'SENSITIVE'
}

/**
 * 
 * @export
 * @interface BadRequestDto
 */
export interface BadRequestDto {
    /**
     * 
     * @type {number}
     * @memberof BadRequestDto
     */
    statusCode: StatusCode;
    /**
     * 
     * @type {string}
     * @memberof BadRequestDto
     */
    error: _Error;
}

/**
    * @export
    * @enum {string}
    */
export enum StatusCode {
    NUMBER_400 = 400
}
/**
    * @export
    * @enum {string}
    */
export enum _Error {
    BadRequest = 'Bad Request'
}

/**
 * 
 * @export
 * @interface BulkSearchDto
 */
export interface BulkSearchDto {
    /**
     * 
     * @type {Array<string>}
     * @memberof BulkSearchDto
     */
    ids: Array<string>;
    /**
     * select should contain at leas 1 property
     * @type {Array<string>}
     * @memberof BulkSearchDto
     */
    select: Array<string>;
}
/**
 * 
 * @export
 * @interface BulkSearchResultDto
 */
export interface BulkSearchResultDto {
    /**
     * 
     * @type {string}
     * @memberof BulkSearchResultDto
     */
    id: string;
    /**
     * 
     * @type {object}
     * @memberof BulkSearchResultDto
     */
    systemAttributes: object;
    /**
     * 
     * @type {PartialSharedAttributesDto}
     * @memberof BulkSearchResultDto
     */
    sharedAttributes: PartialSharedAttributesDto;
}
/**
 * 
 * @export
 * @interface ConflictDto
 */
export interface ConflictDto {
    /**
     * 
     * @type {number}
     * @memberof ConflictDto
     */
    statusCode: StatusCode;
    /**
     * 
     * @type {string}
     * @memberof ConflictDto
     */
    error: _Error;
}

/**
    * @export
    * @enum {string}
    */
export enum StatusCode {
    NUMBER_409 = 409
}
/**
    * @export
    * @enum {string}
    */
export enum _Error {
    Conflict = 'Conflict'
}

/**
 * 
 * @export
 * @interface CreateOrGetUserDto
 */
export interface CreateOrGetUserDto {
    /**
     * 
     * @type {SharedAttributesDto}
     * @memberof CreateOrGetUserDto
     */
    sharedAttributes?: SharedAttributesDto;
    /**
     * 
     * @type {object}
     * @memberof CreateOrGetUserDto
     */
    systemAttributes?: object;
    /**
     * External user id, must be unique inside provider
     * @type {string}
     * @memberof CreateOrGetUserDto
     */
    externalId: string;
    /**
     * User info provider
     * @type {string}
     * @memberof CreateOrGetUserDto
     */
    issuer: string;
}
/**
 * 
 * @export
 * @interface CreateSystemDto
 */
export interface CreateSystemDto {
    /**
     * 
     * @type {string}
     * @memberof CreateSystemDto
     */
    id?: string;
    /**
     * 
     * @type {Array<AttributesDefinitionDto>}
     * @memberof CreateSystemDto
     */
    attributesDefinition?: Array<AttributesDefinitionDto>;
    /**
     * 
     * @type {string}
     * @memberof CreateSystemDto
     */
    name: string;
}
/**
 * 
 * @export
 * @interface EmailDto
 */
export interface EmailDto {
    /**
     * 
     * @type {string}
     * @memberof EmailDto
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailDto
     */
    value: string;
}
/**
 * 
 * @export
 * @interface InternalServerErrorDto
 */
export interface InternalServerErrorDto {
    /**
     * 
     * @type {number}
     * @memberof InternalServerErrorDto
     */
    statusCode: StatusCode;
    /**
     * 
     * @type {string}
     * @memberof InternalServerErrorDto
     */
    message: Message;
}

/**
    * @export
    * @enum {string}
    */
export enum StatusCode {
    NUMBER_500 = 500
}
/**
    * @export
    * @enum {string}
    */
export enum Message {
    InternalServerError = 'Internal Server Error'
}

/**
 * 
 * @export
 * @interface NotFoundDto
 */
export interface NotFoundDto {
    /**
     * 
     * @type {number}
     * @memberof NotFoundDto
     */
    statusCode: StatusCode;
    /**
     * 
     * @type {string}
     * @memberof NotFoundDto
     */
    message: string;
    /**
     * 
     * @type {string}
     * @memberof NotFoundDto
     */
    error: _Error;
}

/**
    * @export
    * @enum {string}
    */
export enum StatusCode {
    NUMBER_404 = 404
}
/**
    * @export
    * @enum {string}
    */
export enum _Error {
    NotFound = 'Not Found'
}

/**
 * 
 * @export
 * @interface PartialSharedAttributesDto
 */
export interface PartialSharedAttributesDto {
    /**
     * 
     * @type {string}
     * @memberof PartialSharedAttributesDto
     */
    displayName?: string;
    /**
     * 
     * @type {Array<EmailDto>}
     * @memberof PartialSharedAttributesDto
     */
    emails?: Array<EmailDto>;
    /**
     * 
     * @type {Array<PhoneNumberDto>}
     * @memberof PartialSharedAttributesDto
     */
    phoneNumbers?: Array<PhoneNumberDto>;
    /**
     * 
     * @type {Array<AddressDto>}
     * @memberof PartialSharedAttributesDto
     */
    addresses?: Array<AddressDto>;
}
/**
 * 
 * @export
 * @interface PhoneNumberDto
 */
export interface PhoneNumberDto {
    /**
     * 
     * @type {string}
     * @memberof PhoneNumberDto
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof PhoneNumberDto
     */
    value: string;
}
/**
 * 
 * @export
 * @interface ServiceHealthyDto
 */
export interface ServiceHealthyDto {
    /**
     * 
     * @type {string}
     * @memberof ServiceHealthyDto
     */
    status: Status;
    /**
     * 
     * @type {object}
     * @memberof ServiceHealthyDto
     */
    info: object;
    /**
     * 
     * @type {object}
     * @memberof ServiceHealthyDto
     */
    error: object;
    /**
     * 
     * @type {object}
     * @memberof ServiceHealthyDto
     */
    details: object;
}

/**
    * @export
    * @enum {string}
    */
export enum Status {
    Ok = 'ok'
}

/**
 * 
 * @export
 * @interface ServiceUnavailableDto
 */
export interface ServiceUnavailableDto {
    /**
     * 
     * @type {string}
     * @memberof ServiceUnavailableDto
     */
    status: Status;
    /**
     * 
     * @type {object}
     * @memberof ServiceUnavailableDto
     */
    info: object;
    /**
     * 
     * @type {object}
     * @memberof ServiceUnavailableDto
     */
    error: object;
    /**
     * 
     * @type {object}
     * @memberof ServiceUnavailableDto
     */
    details: object;
}

/**
    * @export
    * @enum {string}
    */
export enum Status {
    Error = 'error'
}

/**
 * 
 * @export
 * @interface SharedAttributesDto
 */
export interface SharedAttributesDto {
    /**
     * 
     * @type {string}
     * @memberof SharedAttributesDto
     */
    displayName: string;
    /**
     * 
     * @type {Array<EmailDto>}
     * @memberof SharedAttributesDto
     */
    emails: Array<EmailDto>;
    /**
     * 
     * @type {Array<PhoneNumberDto>}
     * @memberof SharedAttributesDto
     */
    phoneNumbers: Array<PhoneNumberDto>;
    /**
     * 
     * @type {Array<AddressDto>}
     * @memberof SharedAttributesDto
     */
    addresses: Array<AddressDto>;
}
/**
 * 
 * @export
 * @interface SystemDto
 */
export interface SystemDto {
    /**
     * 
     * @type {string}
     * @memberof SystemDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof SystemDto
     */
    name: string;
    /**
     * 
     * @type {Array<AttributesDefinitionDto>}
     * @memberof SystemDto
     */
    attributesDefinition: Array<AttributesDefinitionDto>;
}
/**
 * 
 * @export
 * @interface UpdateSystemDto
 */
export interface UpdateSystemDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateSystemDto
     */
    name: string;
    /**
     * 
     * @type {Array<AttributesDefinitionDto>}
     * @memberof UpdateSystemDto
     */
    attributesDefinition: Array<AttributesDefinitionDto>;
}
/**
 * 
 * @export
 * @interface UpdateUserDto
 */
export interface UpdateUserDto {
    /**
     * 
     * @type {SharedAttributesDto}
     * @memberof UpdateUserDto
     */
    sharedAttributes: SharedAttributesDto;
    /**
     * 
     * @type {object}
     * @memberof UpdateUserDto
     */
    systemAttributes: object;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    tenantId: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    systemId: string;
    /**
     * 
     * @type {SharedAttributesDto}
     * @memberof UserDto
     */
    sharedAttributes: SharedAttributesDto;
    /**
     * 
     * @type {object}
     * @memberof UserDto
     */
    systemAttributes: object;
}

/**
 * BulkSearchApi - axios parameter creator
 * @export
 */
export const BulkSearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Find users given array of user ids
         * @param {string} tenantId 
         * @param {string} systemId 
         * @param {BulkSearchDto} bulkSearchDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUsers: async (tenantId: string, systemId: string, bulkSearchDto: BulkSearchDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('findUsers', 'tenantId', tenantId)
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('findUsers', 'systemId', systemId)
            // verify required parameter 'bulkSearchDto' is not null or undefined
            assertParamExists('findUsers', 'bulkSearchDto', bulkSearchDto)
            const localVarPath = `/api/v1/tenants/{tenantId}/systems/{systemId}/users:bulk-search`
                .replace(`{${"tenantId"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bulkSearchDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BulkSearchApi - functional programming interface
 * @export
 */
export const BulkSearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BulkSearchApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Find users given array of user ids
         * @param {string} tenantId 
         * @param {string} systemId 
         * @param {BulkSearchDto} bulkSearchDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findUsers(tenantId: string, systemId: string, bulkSearchDto: BulkSearchDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BulkSearchResultDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findUsers(tenantId, systemId, bulkSearchDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BulkSearchApi - factory interface
 * @export
 */
export const BulkSearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BulkSearchApiFp(configuration)
    return {
        /**
         * 
         * @summary Find users given array of user ids
         * @param {string} tenantId 
         * @param {string} systemId 
         * @param {BulkSearchDto} bulkSearchDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUsers(tenantId: string, systemId: string, bulkSearchDto: BulkSearchDto, options?: any): AxiosPromise<Array<BulkSearchResultDto>> {
            return localVarFp.findUsers(tenantId, systemId, bulkSearchDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BulkSearchApi - object-oriented interface
 * @export
 * @class BulkSearchApi
 * @extends {BaseAPI}
 */
export class BulkSearchApi extends BaseAPI {
    /**
     * 
     * @summary Find users given array of user ids
     * @param {string} tenantId 
     * @param {string} systemId 
     * @param {BulkSearchDto} bulkSearchDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkSearchApi
     */
    public findUsers(tenantId: string, systemId: string, bulkSearchDto: BulkSearchDto, options?: any) {
        return BulkSearchApiFp(this.configuration).findUsers(tenantId, systemId, bulkSearchDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * HealthCheckApi - axios parameter creator
 * @export
 */
export const HealthCheckApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method checks liveness
         * @summary Health check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/healthz`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthCheckApi - functional programming interface
 * @export
 */
export const HealthCheckApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthCheckApiAxiosParamCreator(configuration)
    return {
        /**
         * This method checks liveness
         * @summary Health check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheck(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceHealthyDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheck(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HealthCheckApi - factory interface
 * @export
 */
export const HealthCheckApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthCheckApiFp(configuration)
    return {
        /**
         * This method checks liveness
         * @summary Health check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck(options?: any): AxiosPromise<ServiceHealthyDto> {
            return localVarFp.healthCheck(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthCheckApi - object-oriented interface
 * @export
 * @class HealthCheckApi
 * @extends {BaseAPI}
 */
export class HealthCheckApi extends BaseAPI {
    /**
     * This method checks liveness
     * @summary Health check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthCheckApi
     */
    public healthCheck(options?: any) {
        return HealthCheckApiFp(this.configuration).healthCheck(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SystemsApi - axios parameter creator
 * @export
 */
export const SystemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create system
         * @param {CreateSystemDto} createSystemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSystem: async (createSystemDto: CreateSystemDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createSystemDto' is not null or undefined
            assertParamExists('createSystem', 'createSystemDto', createSystemDto)
            const localVarPath = `/api/v1/systems`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSystemDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete system
         * @param {string} systemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSystem: async (systemId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('deleteSystem', 'systemId', systemId)
            const localVarPath = `/api/v1/systems/{systemId}`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get system
         * @param {string} systemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystem: async (systemId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('getSystem', 'systemId', systemId)
            const localVarPath = `/api/v1/systems/{systemId}`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List systems
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystems: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/systems`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update system
         * @param {string} systemId 
         * @param {UpdateSystemDto} updateSystemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSystem: async (systemId: string, updateSystemDto: UpdateSystemDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('updateSystem', 'systemId', systemId)
            // verify required parameter 'updateSystemDto' is not null or undefined
            assertParamExists('updateSystem', 'updateSystemDto', updateSystemDto)
            const localVarPath = `/api/v1/systems/{systemId}`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSystemDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemsApi - functional programming interface
 * @export
 */
export const SystemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create system
         * @param {CreateSystemDto} createSystemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSystem(createSystemDto: CreateSystemDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSystem(createSystemDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete system
         * @param {string} systemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSystem(systemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSystem(systemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get system
         * @param {string} systemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystem(systemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystem(systemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List systems
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystems(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SystemDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystems(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update system
         * @param {string} systemId 
         * @param {UpdateSystemDto} updateSystemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSystem(systemId: string, updateSystemDto: UpdateSystemDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSystem(systemId, updateSystemDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SystemsApi - factory interface
 * @export
 */
export const SystemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create system
         * @param {CreateSystemDto} createSystemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSystem(createSystemDto: CreateSystemDto, options?: any): AxiosPromise<SystemDto> {
            return localVarFp.createSystem(createSystemDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete system
         * @param {string} systemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSystem(systemId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSystem(systemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get system
         * @param {string} systemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystem(systemId: string, options?: any): AxiosPromise<SystemDto> {
            return localVarFp.getSystem(systemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List systems
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystems(options?: any): AxiosPromise<Array<SystemDto>> {
            return localVarFp.getSystems(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update system
         * @param {string} systemId 
         * @param {UpdateSystemDto} updateSystemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSystem(systemId: string, updateSystemDto: UpdateSystemDto, options?: any): AxiosPromise<SystemDto> {
            return localVarFp.updateSystem(systemId, updateSystemDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemsApi - object-oriented interface
 * @export
 * @class SystemsApi
 * @extends {BaseAPI}
 */
export class SystemsApi extends BaseAPI {
    /**
     * 
     * @summary Create system
     * @param {CreateSystemDto} createSystemDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    public createSystem(createSystemDto: CreateSystemDto, options?: any) {
        return SystemsApiFp(this.configuration).createSystem(createSystemDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete system
     * @param {string} systemId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    public deleteSystem(systemId: string, options?: any) {
        return SystemsApiFp(this.configuration).deleteSystem(systemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get system
     * @param {string} systemId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    public getSystem(systemId: string, options?: any) {
        return SystemsApiFp(this.configuration).getSystem(systemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List systems
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    public getSystems(options?: any) {
        return SystemsApiFp(this.configuration).getSystems(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update system
     * @param {string} systemId 
     * @param {UpdateSystemDto} updateSystemDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    public updateSystem(systemId: string, updateSystemDto: UpdateSystemDto, options?: any) {
        return SystemsApiFp(this.configuration).updateSystem(systemId, updateSystemDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get / Create user
         * @param {string} tenantId 
         * @param {string} systemId 
         * @param {CreateOrGetUserDto} createOrGetUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrGetUser: async (tenantId: string, systemId: string, createOrGetUserDto: CreateOrGetUserDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('createOrGetUser', 'tenantId', tenantId)
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('createOrGetUser', 'systemId', systemId)
            // verify required parameter 'createOrGetUserDto' is not null or undefined
            assertParamExists('createOrGetUser', 'createOrGetUserDto', createOrGetUserDto)
            const localVarPath = `/api/v1/tenants/{tenantId}/systems/{systemId}/users`
                .replace(`{${"tenantId"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOrGetUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete user
         * @param {string} tenantId 
         * @param {string} systemId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (tenantId: string, systemId: string, userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('deleteUser', 'tenantId', tenantId)
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('deleteUser', 'systemId', systemId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUser', 'userId', userId)
            const localVarPath = `/api/v1/tenants/{tenantId}/systems/{systemId}/users/{userId}`
                .replace(`{${"tenantId"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find user
         * @param {string} tenantId 
         * @param {string} systemId 
         * @param {string} filter Filter as JSON string
         * @param {'NON_SENSITIVE' | 'LOW' | 'MEDIUM' | 'SENSITIVE'} [classifier] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUser: async (tenantId: string, systemId: string, filter: string, classifier?: 'NON_SENSITIVE' | 'LOW' | 'MEDIUM' | 'SENSITIVE', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('findUser', 'tenantId', tenantId)
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('findUser', 'systemId', systemId)
            // verify required parameter 'filter' is not null or undefined
            assertParamExists('findUser', 'filter', filter)
            const localVarPath = `/api/v1/tenants/{tenantId}/systems/{systemId}/users`
                .replace(`{${"tenantId"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (classifier !== undefined) {
                localVarQueryParameter['classifier'] = classifier;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user
         * @param {string} tenantId 
         * @param {string} systemId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (tenantId: string, systemId: string, userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('getUser', 'tenantId', tenantId)
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('getUser', 'systemId', systemId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUser', 'userId', userId)
            const localVarPath = `/api/v1/tenants/{tenantId}/systems/{systemId}/users/{userId}`
                .replace(`{${"tenantId"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update user
         * @param {string} tenantId 
         * @param {string} systemId 
         * @param {string} userId 
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (tenantId: string, systemId: string, userId: string, updateUserDto: UpdateUserDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('updateUser', 'tenantId', tenantId)
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('updateUser', 'systemId', systemId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUser', 'userId', userId)
            // verify required parameter 'updateUserDto' is not null or undefined
            assertParamExists('updateUser', 'updateUserDto', updateUserDto)
            const localVarPath = `/api/v1/tenants/{tenantId}/systems/{systemId}/users/{userId}`
                .replace(`{${"tenantId"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get / Create user
         * @param {string} tenantId 
         * @param {string} systemId 
         * @param {CreateOrGetUserDto} createOrGetUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrGetUser(tenantId: string, systemId: string, createOrGetUserDto: CreateOrGetUserDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrGetUser(tenantId, systemId, createOrGetUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete user
         * @param {string} tenantId 
         * @param {string} systemId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(tenantId: string, systemId: string, userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(tenantId, systemId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Find user
         * @param {string} tenantId 
         * @param {string} systemId 
         * @param {string} filter Filter as JSON string
         * @param {'NON_SENSITIVE' | 'LOW' | 'MEDIUM' | 'SENSITIVE'} [classifier] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findUser(tenantId: string, systemId: string, filter: string, classifier?: 'NON_SENSITIVE' | 'LOW' | 'MEDIUM' | 'SENSITIVE', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findUser(tenantId, systemId, filter, classifier, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get user
         * @param {string} tenantId 
         * @param {string} systemId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(tenantId: string, systemId: string, userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(tenantId, systemId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update user
         * @param {string} tenantId 
         * @param {string} systemId 
         * @param {string} userId 
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(tenantId: string, systemId: string, userId: string, updateUserDto: UpdateUserDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(tenantId, systemId, userId, updateUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Get / Create user
         * @param {string} tenantId 
         * @param {string} systemId 
         * @param {CreateOrGetUserDto} createOrGetUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrGetUser(tenantId: string, systemId: string, createOrGetUserDto: CreateOrGetUserDto, options?: any): AxiosPromise<UserDto> {
            return localVarFp.createOrGetUser(tenantId, systemId, createOrGetUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete user
         * @param {string} tenantId 
         * @param {string} systemId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(tenantId: string, systemId: string, userId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUser(tenantId, systemId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find user
         * @param {string} tenantId 
         * @param {string} systemId 
         * @param {string} filter Filter as JSON string
         * @param {'NON_SENSITIVE' | 'LOW' | 'MEDIUM' | 'SENSITIVE'} [classifier] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUser(tenantId: string, systemId: string, filter: string, classifier?: 'NON_SENSITIVE' | 'LOW' | 'MEDIUM' | 'SENSITIVE', options?: any): AxiosPromise<UserDto> {
            return localVarFp.findUser(tenantId, systemId, filter, classifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user
         * @param {string} tenantId 
         * @param {string} systemId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(tenantId: string, systemId: string, userId: string, options?: any): AxiosPromise<UserDto> {
            return localVarFp.getUser(tenantId, systemId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update user
         * @param {string} tenantId 
         * @param {string} systemId 
         * @param {string} userId 
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(tenantId: string, systemId: string, userId: string, updateUserDto: UpdateUserDto, options?: any): AxiosPromise<UserDto> {
            return localVarFp.updateUser(tenantId, systemId, userId, updateUserDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary Get / Create user
     * @param {string} tenantId 
     * @param {string} systemId 
     * @param {CreateOrGetUserDto} createOrGetUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createOrGetUser(tenantId: string, systemId: string, createOrGetUserDto: CreateOrGetUserDto, options?: any) {
        return UsersApiFp(this.configuration).createOrGetUser(tenantId, systemId, createOrGetUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete user
     * @param {string} tenantId 
     * @param {string} systemId 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteUser(tenantId: string, systemId: string, userId: string, options?: any) {
        return UsersApiFp(this.configuration).deleteUser(tenantId, systemId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find user
     * @param {string} tenantId 
     * @param {string} systemId 
     * @param {string} filter Filter as JSON string
     * @param {'NON_SENSITIVE' | 'LOW' | 'MEDIUM' | 'SENSITIVE'} [classifier] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public findUser(tenantId: string, systemId: string, filter: string, classifier?: 'NON_SENSITIVE' | 'LOW' | 'MEDIUM' | 'SENSITIVE', options?: any) {
        return UsersApiFp(this.configuration).findUser(tenantId, systemId, filter, classifier, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user
     * @param {string} tenantId 
     * @param {string} systemId 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUser(tenantId: string, systemId: string, userId: string, options?: any) {
        return UsersApiFp(this.configuration).getUser(tenantId, systemId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update user
     * @param {string} tenantId 
     * @param {string} systemId 
     * @param {string} userId 
     * @param {UpdateUserDto} updateUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUser(tenantId: string, systemId: string, userId: string, updateUserDto: UpdateUserDto, options?: any) {
        return UsersApiFp(this.configuration).updateUser(tenantId, systemId, userId, updateUserDto, options).then((request) => request(this.axios, this.basePath));
    }
}


